syntax = "proto3";
package manifest;

import "google/protobuf/empty.proto";

option go_package = "github.com/jumptown-skydiving/manifest-server/pkg/server";

message Status {
	string winds = 1;
	uint32 windsColor = 2;
	string clouds = 3;
	uint32 cloudsColor = 4;
	string weather = 5;
	uint32 weatherColor = 6;
	string separation = 7;
	uint32 separationColor = 8;
	string temperature = 9;
	uint32 temperatureColor = 10;
}

message Options {
	bool display_nicknames = 2;
	bool display_weather = 3;
	bool display_winds = 4;
	string message = 5;
	uint32 messageColor = 6;
	string sunrise = 7;
	string sunset = 8;
	bool fuelRequested = 9;
}

message JumprunOrigin {
	string latitude = 1;
	string longitude = 2;
	int32 magnetic_deviation = 3;
	int32 camera_height = 4;
}

message JumprunTurn {
	int32 distance = 1;
	int32 heading = 2;
}

message JumprunPath {
	int32 heading = 3;
	int32 exit_distance = 4;
	int32 offset_heading = 5;
	int32 offset_distance = 6;
	repeated JumprunTurn turns = 7;
}

message Jumprun {
	JumprunOrigin origin = 1;
	optional JumprunPath path = 2;
	repeated int32 offsets = 3;
}

message WindsAloftSample {
	int32 altitude = 1;
	int32 heading = 2;
	int32 speed = 3;
	int32 temperature = 4;
	bool variable = 5;
}

message WindsAloft {
	repeated WindsAloftSample samples = 1;
}

enum JumperType {
	EXPERIENCED = 0;
	AFF_STUDENT = 1;
	COACH_STUDENT = 2;
	TANDEM_STUDENT = 3;
	AFF_INSTRUCTOR = 4;
	COACH = 5;
	TANDEM_INSTRUCTOR = 6;
	VIDEOGRAPHER = 7;
}

message Jumper {
	uint64 id = 1;
	JumperType type = 2;
	string name = 3;
	string nickname = 4;
	string short_name = 5;
	uint32 color = 6;
	string repr = 7;
	string rig_name = 8;
}

message JumperGroup {
	Jumper leader = 1;
	repeated Jumper members = 2;
}

message LoadSlot {
	oneof slot {
		Jumper jumper = 1;
		JumperGroup group = 2;
	}
}

message Load {
	uint64 id = 1;
	string aircraft_name = 2;
	string load_number = 3;
	int32 call_minutes = 4;
	string call_minutes_string = 5;
	int32 slots_available = 6;
	string slots_available_string = 7;
	bool is_fueling = 8;
	bool is_turning = 9;
	bool is_no_time = 10;
	repeated LoadSlot slots = 11;
}

message Loads {
	int32 column_count = 1;
	repeated Load loads = 2;
}

message ManifestUpdate {
	optional Status status = 1;
	optional Options options = 2;
	optional Jumprun jumprun = 3;
	optional WindsAloft winds_aloft = 4;
	optional Loads loads = 5;
}

message SignInWithAppleRequest {
	string bundle_id = 1;
	string nonce = 2;
	string identity_token = 3;
	string authorization_code = 4;
	string given_name = 5;
	string family_name = 6;
}

message SignInResponse {
	string session_id = 1;
	int64 session_expiration = 2;
	bool is_valid = 3;
	repeated string roles = 4;
	string error_message = 5;
	bool session_deleted = 6;
}

message SignOutRequest {
	string session_id = 1;
}

message SignOutResponse {
	string session_id = 1;
}

message VerifySessionRequest {
	string session_id = 1;
}

message ToggleFuelRequestedRequest {
	string session_id = 1;
}

message ToggleFuelRequestedResponse {
	string error_message = 1;
}

message RestartServerRequest {
	string session_id = 1;
}

message RestartServerResponse {
	string error_message = 1;
}

service ManifestService {
	rpc StreamUpdates(google.protobuf.Empty) returns (stream ManifestUpdate);
	rpc SignInWithApple(SignInWithAppleRequest) returns (SignInResponse);
	rpc SignOut(SignOutRequest) returns (SignOutResponse);
	rpc VerifySessionID(VerifySessionRequest) returns (SignInResponse);
	rpc ToggleFuelRequested(ToggleFuelRequestedRequest) returns (ToggleFuelRequestedResponse);
	rpc RestartServer(RestartServerRequest) returns (RestartServerResponse);
}
